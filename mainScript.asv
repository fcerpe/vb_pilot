% (C) Copyright 2018 Mohamed Rezk
% (C) Copyright 2020 CPP visual motion localizer developpers

%% mainScript

% Clear all the previous stuff
clc;
if ~ismac
    close all;
    clear Screen;
end
 
% make sure we got access to all the required functions and inputs
initEnv();

% set and load all the parameters to run the experiment
cfg = setParameters;
cfg = userInputs(cfg); % just checking
cfg = createFilename(cfg); % according to BIDS standard
 
% Load file with stimuli information (can change later)
% is there a better folder? 
% DOES NOT COMPUTE.
% ERROR: Unable to resolve the name stimuli.french.words
load('input\stimuli_post_selection.mat'); 

% Get the list of stimuli to present
toPresent = vertcat(stimuli.french.words,stimuli.braille.words,stimuli.french.nonwords,stimuli.braille.nonwords);
nbStimuli = size(toPresent);

% Assign a number to each presentation
stimPosition = 1:nbStimuli;

% Shuffle them: order nb + nb of repetitions
presentationOrder = repeatShuffleConditions(nbStimuli,3);
% cfg.design.nbTrials = size(presentationOrder,2); % As many trials as repeated stimuli

%%  Experiment

% Safety loop: close the screen if code crashes
try
    
    %% Init the experiment
    [cfg] = initPTB(cfg);

    cfg = postInitializationSetup(cfg);

    % Prepare for the output logfiles with all
    logFile.extraColumns = cfg.extraColumns;
    logFile = saveEventsFile('open', cfg, logFile);

    disp(cfg);

    % Show experiment instruction
    standByScreen(cfg);

    % prepare the KbQueue to collect responses
    getResponse('init', cfg.keyboard.responseBox, cfg);

    %% Experiment Start

    cfg = getExperimentStart(cfg);

    %% For Each Block

    for iBlock = 1:cfg.design.nbBlocks % 1 % cfg.design.nbBlocks. Kept for adaptation porpuses

        waitFor(cfg, cfg.timing.onsetDelay);

        for iTrial = 1:cfg.design.nbTrials

            fprintf('\n - Running trial %.0f \n', iTrial);

            % Check for experiment abortion from operator
            checkAbort(cfg, cfg.keyboard.keyboard);

            [thisEvent, thisFixation, cfg] = preTrialSetup(cfg, iBlock, iTrial);

            % Get the current stimulus to present
            thisStimulus = toPresent{iBlock};
            
            if isFrenchAlphabet(thisStimulus)
                thisPresentation = getLettersCoord(thisStimulus);
            else
                thisPresentation.stimulus = 
            end
            % the letters ragne, return true
            thisPresentation = getLettersCoord(thisStimulus);
            
            % present the (non)word for a set amount of time 
            [onset, duration] = showStimulus(cfg, thisEvent, thisFixation, thisPresentation);

            % Ask and wait for reply (OR 5s)
            [onset,duration] = allowResponse(cfg, thisEvent, thisFixation, thisStimulus);
            
            thisEvent = preSaveSetup( ...
                                     thisEvent, ...
                                     iBlock, ...
                                     iTrial, ...
                                     duration, onset, ...
                                     cfg, ...
                                     logFile);

            saveEventsFile('save', cfg, thisEvent);

            % collect the responses and appends to the event structure for
            % saving in the tsv file
            responseEvents = getResponse('check', cfg.keyboard.responseBox, cfg);

            responseEvents(1).fileID = logFile.fileID;
            responseEvents(1).extraColumns = logFile.extraColumns;
            saveEventsFile('save', cfg, responseEvents);

            waitFor(cfg, cfg.timing.ISI);

         end

    end

    % End of the run for the BOLD to go down
    waitFor(cfg, cfg.timing.endDelay);

    cfg = getExperimentEnd(cfg);

    % Close the logfiles
    saveEventsFile('close', cfg, logFile);

    getResponse('stop', cfg.keyboard.responseBox);
    getResponse('release', cfg.keyboard.responseBox);

    createJson(cfg, cfg);

    farewellScreen(cfg);

    cleanUp();

catch

    cleanUp();
    psychrethrow(psychlasterror);

end
